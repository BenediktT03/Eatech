# EATECH V3.0 - Kubernetes Secrets Configuration
# WARNING: This file contains placeholders. Never commit real secrets to version control.
# Use a secrets management tool like Sealed Secrets, HashiCorp Vault, or AWS Secrets Manager.

apiVersion: v1
kind: Secret
metadata:
  name: eatech-firebase-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: eatech-platform
    secret.type: firebase
type: Opaque
stringData:
  api-key: "PLACEHOLDER_FIREBASE_API_KEY"
  app-id: "PLACEHOLDER_FIREBASE_APP_ID"
  measurement-id: "PLACEHOLDER_FIREBASE_MEASUREMENT_ID"
  service-account-key: |
    {
      "type": "service_account",
      "project_id": "eatech-prod",
      "private_key_id": "PLACEHOLDER",
      "private_key": "-----BEGIN PRIVATE KEY-----\nPLACEHOLDER\n-----END PRIVATE KEY-----\n",
      "client_email": "firebase-adminsdk@eatech-prod.iam.gserviceaccount.com",
      "client_id": "PLACEHOLDER",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "PLACEHOLDER"
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-stripe-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: payment
type: Opaque
stringData:
  public-key: "pk_live_PLACEHOLDER"
  secret-key: "sk_live_PLACEHOLDER"
  webhook-secret: "whsec_PLACEHOLDER"
  restricted-key: "rk_live_PLACEHOLDER"
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-twint-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: payment
type: Opaque
stringData:
  api-key: "PLACEHOLDER_TWINT_API_KEY"
  api-secret: "PLACEHOLDER_TWINT_API_SECRET"
  webhook-secret: "PLACEHOLDER_TWINT_WEBHOOK_SECRET"
  merchant-certificate: |
    -----BEGIN CERTIFICATE-----
    PLACEHOLDER_CERTIFICATE
    -----END CERTIFICATE-----
  merchant-private-key: |
    -----BEGIN PRIVATE KEY-----
    PLACEHOLDER_PRIVATE_KEY
    -----END PRIVATE KEY-----
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-database-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: database
type: Opaque
stringData:
  postgres-username: "eatech_user"
  postgres-password: "PLACEHOLDER_POSTGRES_PASSWORD"
  postgres-root-password: "PLACEHOLDER_POSTGRES_ROOT_PASSWORD"
  connection-string: "postgresql://eatech_user:PLACEHOLDER_POSTGRES_PASSWORD@postgres:5432/eatech?sslmode=require"
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-redis-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: cache
type: Opaque
stringData:
  redis-password: "PLACEHOLDER_REDIS_PASSWORD"
  redis-url: "redis://:PLACEHOLDER_REDIS_PASSWORD@redis:6379/0"
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-monitoring-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: monitoring
type: Opaque
stringData:
  sentry-dsn-web: "https://PLACEHOLDER@sentry.io/PLACEHOLDER"
  sentry-dsn-admin: "https://PLACEHOLDER@sentry.io/PLACEHOLDER"
  sentry-dsn-functions: "https://PLACEHOLDER@sentry.io/PLACEHOLDER"
  sentry-auth-token: "PLACEHOLDER_SENTRY_AUTH_TOKEN"
  datadog-api-key: "PLACEHOLDER_DATADOG_API_KEY"
  datadog-app-key: "PLACEHOLDER_DATADOG_APP_KEY"
  plausible-api-key: "PLACEHOLDER_PLAUSIBLE_API_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-admin-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: application
type: Opaque
stringData:
  session-secret: "PLACEHOLDER_SESSION_SECRET_MIN_32_CHARS"
  jwt-secret: "PLACEHOLDER_JWT_SECRET"
  encryption-key: "PLACEHOLDER_ENCRYPTION_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: eatech-master-secrets
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: application
type: Opaque
stringData:
  master-api-key: "PLACEHOLDER_MASTER_API_KEY"
  master-admin-password: "PLACEHOLDER_MASTER_ADMIN_PASSWORD"
  license-key: "PLACEHOLDER_LICENSE_KEY"
---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: eatech-prod
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: secrets
    secret.type: docker-registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    {
      "auths": {
        "registry.example.com": {
          "username": "PLACEHOLDER_USERNAME",
          "password": "PLACEHOLDER_PASSWORD",
          "email": "admin@eatech.ch",
          "auth": "PLACEHOLDER_BASE64_AUTH"
        }
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: staging-auth
  namespace: eatech-staging
  labels:
    app.kubernetes.io/name: eatech-secrets
    app.kubernetes.io/instance: staging
    app.kubernetes.io/component: secrets
    secret.type: basic-auth
type: Opaque
data:
  # Username: staging, Password: CHANGE_ME_STAGING_PASSWORD
  # Generated with: htpasswd -nb staging CHANGE_ME_STAGING_PASSWORD
  auth: c3RhZ2luZzokYXByMSRQUC5EalVNbiRnLmJPUGt2YTQwUk1BT3hPS0RQTmwwCg==
---
# External Secrets Operator Configuration (if using)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: eatech-secret-store
  namespace: eatech-prod
spec:
  provider:
    # AWS Secrets Manager
    aws:
      service: SecretsManager
      region: eu-central-1
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: aws-secret
            key: access-key-id
          secretAccessKeySecretRef:
            name: aws-secret
            key: secret-access-key
---
# Example External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eatech-firebase-external
  namespace: eatech-prod
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: eatech-secret-store
    kind: SecretStore
  target:
    name: eatech-firebase-secrets
    creationPolicy: Owner
  data:
  - secretKey: api-key
    remoteRef:
      key: eatech/prod/firebase
      property: api-key
  - secretKey: app-id
    remoteRef:
      key: eatech/prod/firebase
      property: app-id
  - secretKey: service-account-key
    remoteRef:
      key: eatech/prod/firebase
      property: service-account-key
