# EATECH V3.0 - Customer PWA Kubernetes Deployment
# Next.js 14 with auto-scaling and Swiss data residency
# Production-ready with monitoring and security

apiVersion: apps/v1
kind: Deployment
metadata:
  name: eatech-web
  namespace: eatech-production
  labels:
    app: eatech-web
    component: frontend
    tier: web
    version: v3.0.0
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "EATECH Customer PWA - Next.js 14"
    maintainer: "benedikt@thomma.ch"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: eatech-web
      component: frontend
  template:
    metadata:
      labels:
        app: eatech-web
        component: frontend
        tier: web
        version: v3.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault

      # Swiss Data Residency - Node Affinity
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/region
                operator: In
                values:
                - europe-west6  # Zurich
                - europe-west3  # Frankfurt (backup)
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - eatech-web
              topologyKey: kubernetes.io/hostname

      # Tolerations for Swiss nodes
      tolerations:
      - key: "region"
        operator: "Equal"
        value: "switzerland"
        effect: "NoSchedule"

      containers:
      - name: web
        image: eatech/web:3.0.0
        imagePullPolicy: Always

        ports:
        - name: http
          containerPort: 3000
          protocol: TCP

        # Environment Variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: NEXT_PUBLIC_APP_URL
          valueFrom:
            configMapKeyRef:
              name: eatech-config
              key: app-url
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: eatech-config
              key: api-url
        - name: NEXT_PUBLIC_CDN_URL
          valueFrom:
            configMapKeyRef:
              name: eatech-config
              key: cdn-url
        - name: FIREBASE_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: eatech-config
              key: firebase-project-id
        - name: STRIPE_PUBLISHABLE_KEY
          valueFrom:
            secretKeyRef:
              name: eatech-secrets
              key: stripe-publishable-key
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: eatech-secrets
              key: sentry-dsn

        # Resource Limits & Requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"

        # Health Checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            httpHeaders:
            - name: Host
              value: "app.eatech.ch"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1

        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3000
            httpHeaders:
            - name: Host
              value: "app.eatech.ch"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1

        startupProbe:
          httpGet:
            path: /api/startup
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1

        # Security Context for Container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL

        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nextjs-cache
          mountPath: /app/.next/cache
        - name: logs
          mountPath: /app/logs

      # Init Containers
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z eatech-redis-service 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: "100Mi"
      - name: nextjs-cache
        emptyDir:
          sizeLimit: "500Mi"
      - name: logs
        emptyDir:
          sizeLimit: "100Mi"

      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

      # Image Pull Secrets
      imagePullSecrets:
      - name: eatech-registry-secret

      # Service Account
      serviceAccountName: eatech-web-sa
      automountServiceAccountToken: false

      # Restart Policy
      restartPolicy: Always

      # Termination Grace Period
      terminationGracePeriodSeconds: 30

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: eatech-web-hpa
  namespace: eatech-production
  labels:
    app: eatech-web
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: eatech-web
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: eatech-web-pdb
  namespace: eatech-production
  labels:
    app: eatech-web
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: eatech-web
      component: frontend

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eatech-web-sa
  namespace: eatech-production
  labels:
    app: eatech-web
    component: security
  annotations:
    description: "Service account for EATECH web frontend"
automountServiceAccountToken: false

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: eatech-web-netpol
  namespace: eatech-production
  labels:
    app: eatech-web
    component: security
spec:
  podSelector:
    matchLabels:
      app: eatech-web
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: eatech-redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: eatech-functions
    ports:
    - protocol: TCP
      port: 8080
  - to: []  # Allow external HTTPS for Firebase/APIs
    ports:
    - protocol: TCP
      port: 443
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53

---
# Monitoring ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: eatech-web-monitor
  namespace: eatech-production
  labels:
    app: eatech-web
    component: monitoring
spec:
  selector:
    matchLabels:
      app: eatech-web
      component: frontend
  endpoints:
  - port: http
    path: /api/metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
