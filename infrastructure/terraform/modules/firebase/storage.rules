rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTenantMember(tenantId) {
      return isAuthenticated() && 
        firestore.exists(/databases/(default)/documents/tenants/$(tenantId)/members/$(request.auth.uid));
    }
    
    function isTenantStaff(tenantId) {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/tenants/$(tenantId)/members/$(request.auth.uid)).data.role in ['admin', 'staff'];
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf') &&
             request.resource.size < 25 * 1024 * 1024; // 25MB limit
    }
    
    // Public assets (logos, banners, etc.)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only via admin SDK
    }
    
    // Tenant-specific assets
    match /tenants/{tenantId}/{allPaths=**} {
      allow read: if true; // Public read for tenant assets
      allow write: if isTenantStaff(tenantId) && isValidImageFile();
    }
    
    // Product images
    match /products/{tenantId}/{productId}/{imageId} {
      allow read: if true; // Public read
      allow write: if isTenantStaff(tenantId) && isValidImageFile();
      allow delete: if isTenantStaff(tenantId);
    }
    
    // User uploads (profile pictures, etc.)
    match /users/{userId}/{allPaths=**} {
      allow read: if true; // Public profile pictures
      allow write: if isOwner(userId) && isValidImageFile();
      allow delete: if isOwner(userId);
    }
    
    // Order attachments (receipts, invoices)
    match /orders/{tenantId}/{orderId}/{fileName} {
      allow read: if isTenantStaff(tenantId) || 
                     (isAuthenticated() && 
                      firestore.get(/databases/(default)/documents/orders/$(orderId)).data.userId == request.auth.uid);
      allow write: if isTenantStaff(tenantId) && isValidDocumentFile();
    }
    
    // Temporary uploads (auto-deleted after 24 hours)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && 
                           request.resource.size < 50 * 1024 * 1024; // 50MB limit
      allow delete: if isOwner(userId);
    }
    
    // Analytics exports (read-only for tenant admins)
    match /exports/{tenantId}/{allPaths=**} {
      allow read: if isTenantStaff(tenantId);
      allow write: if false; // Only cloud functions
    }
    
    // Backups (restricted access)
    match /backups/{allPaths=**} {
      allow read: if request.auth.token.admin == true;
      allow write: if false; // Only automated backups
    }
    
    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
