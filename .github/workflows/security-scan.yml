name: 🔒 Security Scanning
on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/package.json'
      - '**/package-lock.json'
      - 'Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - sast
          - dast
          - dependency
          - secrets
      target_url:
        description: 'Target URL for DAST scan'
        required: false
        default: 'https://staging.eatech.ch'
        type: string

env:
  NODE_VERSION: '18.19.0'
  SCAN_TYPE: ${{ inputs.scan_type || 'full' }}
  TARGET_URL: ${{ inputs.target_url || 'https://staging.eatech.ch' }}

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  # ===== DEPENDENCY VULNERABILITY SCAN =====
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full", "dependency"]'), env.SCAN_TYPE)
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 NPM Audit
        run: |
          npm audit --audit-level=low --json > npm-audit.json || true
          npm audit --audit-level=moderate || echo "⚠️ Moderate vulnerabilities found"

      - name: 🛡️ Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
        continue-on-error: true

      - name: 🔐 OSV Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --skip-git
            .

      - name: 📊 RetireJS Scan
        run: |
          npx retire --outputformat json --outputpath retire-results.json || true

      - name: 🏥 Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: 📋 Upload SARIF Results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-fs-results.sarif
          category: trivy-filesystem

      - name: 📊 Upload Vulnerability Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-reports
          path: |
            npm-audit.json
            snyk-results.json
            retire-results.json
            trivy-fs-results.sarif
          retention-days: 30

  # ===== STATIC APPLICATION SECURITY TESTING (SAST) =====
  sast-scan:
    name: 🔍 SAST Security Scan
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full", "sast"]'), env.SCAN_TYPE)
    strategy:
      matrix:
        tool: [codeql, semgrep, eslint-security]
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      # CodeQL Analysis
      - name: 🔍 Initialize CodeQL
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: +security-and-quality

      - name: 🏗️ Autobuild for CodeQL
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/autobuild@v2

      - name: 📊 Perform CodeQL Analysis
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      # Semgrep Analysis
      - name: 🔍 Semgrep SAST Scan
        if: matrix.tool == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # ESLint Security
      - name: 🔍 ESLint Security Scan
        if: matrix.tool == 'eslint-security'
        run: |
          npx eslint . \
            --ext .ts,.tsx,.js,.jsx \
            --config .eslintrc.security.js \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-security-results.sarif
        continue-on-error: true

      - name: 📋 Upload SARIF Results
        if: always() && matrix.tool != 'codeql'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            ${{ matrix.tool == 'semgrep' && 'semgrep.sarif' || 'eslint-security-results.sarif' }}
          category: ${{ matrix.tool }}

  # ===== SECRET SCANNING =====
  secrets-scan:
    name: 🔐 Secrets Scanning
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full", "secrets"]'), env.SCAN_TYPE)
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🕵️ GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 🔐 detect-secrets Scan
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

      - name: 🔍 Custom Secrets Pattern Check
        run: |
          echo "🔍 Checking for Swiss-specific patterns..."
          # Check for Swiss bank account patterns (IBAN)
          grep -r "CH[0-9]{2}[A-Z0-9]{4}[0-9]{12}" --include="*.ts" --include="*.js" . || echo "✅ No IBAN patterns found"
          # Check for Swiss postal codes
          grep -r "[0-9]{4}" --include="*.ts" --include="*.js" . | grep -E "(zürich|geneva|basel)" || echo "✅ No postal code leaks"
          # Check for Firebase config exposure
          grep -r "apiKey.*:" --include="*.ts" --include="*.js" . | grep -v "NEXT_PUBLIC" || echo "✅ No Firebase API keys exposed"
          # Check for hardcoded URLs
          grep -r "https://.*\.eatech\.ch" --include="*.ts" --include="*.js" . | grep -v "NEXT_PUBLIC" || echo "✅ No hardcoded URLs"

  # ===== CONTAINER SECURITY SCAN =====
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full"]'), env.SCAN_TYPE)
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Build Docker Image
        run: |
          docker build -t eatech:scan -f Dockerfile.web .

      - name: 🔍 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'eatech:scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: 🛡️ Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: eatech:scan
          args: --severity-threshold=medium

      - name: 📋 Upload Container SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-container-results.sarif
          category: trivy-container

  # ===== DYNAMIC APPLICATION SECURITY TESTING (DAST) =====
  dast-scan:
    name: 🌐 DAST Security Scan
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full", "dast"]'), env.SCAN_TYPE)
    strategy:
      matrix:
        scanner: [zap, nuclei]
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4

      - name: 🔍 OWASP ZAP Full Scan
        if: matrix.scanner == 'zap'
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN'
          issue_title: 'OWASP ZAP Security Vulnerabilities'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Nuclei DAST Scan
        if: matrix.scanner == 'nuclei'
        uses: projectdiscovery/nuclei-action@main
        with:
          target: ${{ env.TARGET_URL }}
          github-report: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          nuclei-templates: |
            ssl
            dns
            cves
            default-logins
            exposed-panels
            misconfiguration
            network
            technologies
            vulnerabilities

      - name: 🕷️ Arachni Web Scanner
        if: matrix.scanner == 'zap'
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            arachni/arachni:latest \
            arachni ${{ env.TARGET_URL }} \
            --checks=* \
            --report-save-path=/workspace/arachni-report.afr \
            --timeout=30000 \
            --max-pages=50

      - name: 🔐 SSL/TLS Security Check
        run: |
          # Check SSL configuration
          curl -I ${{ env.TARGET_URL }} | grep -i "strict-transport-security" || echo "⚠️ HSTS not configured"
          # Test SSL with testssl.sh
          docker run --rm drwetter/testssl.sh:latest \
            --jsonfile-pretty /dev/stdout \
            ${{ env.TARGET_URL }} > ssl-test-results.json

      - name: 📊 Upload DAST Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dast-scan-reports-${{ matrix.scanner }}
          path: |
            report_html.html
            nuclei-github.sarif
            arachni-report.afr
            ssl-test-results.json
          retention-days: 30

  # ===== INFRASTRUCTURE SECURITY =====
  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full"]'), env.SCAN_TYPE)
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4

      - name: 🔍 Terraform Security Scan
        if: hashFiles('infrastructure/**/*.tf') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'infrastructure/'
          format: 'sarif'
          output: 'trivy-terraform-results.sarif'

      - name: 🔒 Checkov Infrastructure Scan
        if: hashFiles('infrastructure/**/*.tf') != ''
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 🌐 DNS Security Check
        run: |
          # Check DNS configuration
          dig TXT eatech.ch | grep -i "v=spf1" || echo "⚠️ SPF record not found"
          dig TXT _dmarc.eatech.ch | grep -i "v=DMARC1" || echo "⚠️ DMARC record not found"
          dig TXT default._domainkey.eatech.ch | grep -i "v=DKIM1" || echo "⚠️ DKIM record not found"

      - name: 🏥 HTTP Security Headers Check
        run: |
          python3 << 'EOF'
          import requests
          import json
          
          url = "${{ env.TARGET_URL }}"
          response = requests.get(url)
          headers = response.headers
          
          security_headers = {
              'Strict-Transport-Security': 'HSTS',
              'X-Content-Type-Options': 'Content Type Options',
              'X-Frame-Options': 'Frame Options',
              'X-XSS-Protection': 'XSS Protection',
              'Content-Security-Policy': 'CSP',
              'Referrer-Policy': 'Referrer Policy',
              'Permissions-Policy': 'Permissions Policy'
          }
          
          results = {}
          for header, name in security_headers.items():
              results[name] = header in headers
              
          print(json.dumps(results, indent=2))
          EOF

      - name: 📋 Upload Infrastructure SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: |
            trivy-terraform-results.sarif
            checkov-results.sarif
          category: infrastructure

  # ===== SWISS COMPLIANCE CHECKS =====
  swiss-compliance:
    name: 🇨🇭 Swiss Compliance Security
    runs-on: ubuntu-latest
    if: contains(fromJSON('["full"]'), env.SCAN_TYPE)
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 GDPR/DSG Compliance Check
        run: |
          echo "🔍 Checking GDPR/DSG compliance..."
          
          # Check for consent management
          if ! grep -r "consent" apps/ --include="*.ts" --include="*.tsx" >/dev/null 2>&1; then
            echo "❌ No consent management implementation found"
            exit 1
          fi
          
          # Check for data encryption at rest
          if ! grep -r "encrypt\|crypto" packages/ --include="*.ts" >/dev/null 2>&1; then
            echo "❌ No encryption implementation found"
            exit 1
          fi
          
          # Check for right to deletion (Article 17)
          if ! grep -r "deleteUser\|anonymize\|purge" functions/ --include="*.ts" >/dev/null 2>&1; then
            echo "❌ No data deletion mechanism found"
            exit 1
          fi
          
          # Check for data portability (Article 20)
          if ! grep -r "export.*data\|download.*data" apps/ --include="*.ts" >/dev/null 2>&1; then
            echo "❌ No data export functionality found"
            exit 1
          fi
          
          echo "✅ GDPR/DSG compliance checks passed"

      - name: 🏦 Swiss Financial Compliance
        run: |
          echo "🔍 Checking Swiss financial compliance..."
          
          # Check for PCI DSS compliance (payment processing)
          if ! grep -r "pci\|tokeniz\|stripe" packages/core/src/services/payment/ --include="*.ts" >/dev/null 2>&1; then
            echo "❌ No PCI DSS compliance measures found"
            exit 1
          fi
          
          # Check for Swiss payment methods
          if ! grep -r "twint\|postfinance" apps/ --include="*.ts" >/dev/null 2>&1; then
            echo "❌ No Swiss payment methods implemented"
            exit 1
          fi
          
          # Check for Swiss tax compliance (7.7% VAT)
          if ! grep -r "7\.7\|taxRate.*7\.7" --include="*.ts" --include="*.js" . >/dev/null 2>&1; then
            echo "❌ Swiss VAT rate not configured"
            exit 1
          fi
          
          echo "✅ Swiss financial compliance checks passed"

      - name: 🔐 Data Residency Check
        run: |
          echo "🔍 Checking data residency compliance..."
          
          # Check Firebase region configuration
          if ! grep -r "europe-west6\|eur3" --include="*.ts" --include="*.js" . >/dev/null 2>&1; then
            echo "❌ Firebase not configured for Swiss/EU region"
            exit 1
          fi
          
          # Check for EU/Swiss CDN configuration
          if ! grep -r "cloudflare.*eu\|cdn.*europe" --include="*.ts" --include="*.js" . >/dev/null 2>&1; then
            echo "⚠️ CDN region not explicitly configured for EU"
          fi
          
          echo "✅ Data residency checks passed"

  # ===== SECURITY METRICS & REPORTING =====
  security-metrics:
    name: 📊 Security Metrics & Reporting
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan, dast-scan, swiss-compliance]
    if: always() && contains(fromJSON('["full"]'), env.SCAN_TYPE)
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4

      - name: 📥 Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports/

      - name: 📊 Generate Security Dashboard
        run: |
          python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          
          # Collect all security scan results
          security_summary = {
              "timestamp": datetime.now().isoformat(),
              "repository": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "scans": {}
          }
          
          # Parse dependency scan results
          if os.path.exists("security-reports/dependency-scan-reports/npm-audit.json"):
              with open("security-reports/dependency-scan-reports/npm-audit.json") as f:
                  audit_data = json.load(f)
                  security_summary["scans"]["dependencies"] = {
                      "vulnerabilities": audit_data.get("metadata", {}).get("vulnerabilities", {}),
                      "status": "completed"
                  }
          
          # Generate HTML report
          html_content = f"""
          <!DOCTYPE html>
          <html>
          <head>
              <title>EATECH Security Report</title>
              <style>
                  body {{ font-family: Arial, sans-serif; margin: 40px; }}
                  .header {{ background: #f8f9fa; padding: 20px; border-left: 4px solid #007bff; }}
                  .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
                  .metric {{ background: white; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }}
                  .green {{ border-left: 4px solid #28a745; }}
                  .yellow {{ border-left: 4px solid #ffc107; }}
                  .red {{ border-left: 4px solid #dc3545; }}
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🔒 EATECH Security Scan Report</h1>
                  <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                  <p>Branch: ${{ github.ref_name }} | Commit: ${{ github.sha[:8] }}</p>
              </div>
              
              <div class="summary">
                  <div class="metric green">
                      <h3>Dependencies</h3>
                      <p>Vulnerability scan completed</p>
                  </div>
                  <div class="metric green">
                      <h3>SAST</h3>
                      <p>Static analysis completed</p>
                  </div>
                  <div class="metric green">
                      <h3>DAST</h3>
                      <p>Dynamic analysis completed</p>
                  </div>
                  <div class="metric green">
                      <h3>Swiss Compliance</h3>
                      <p>GDPR/DSG checks passed</p>
                  </div>
              </div>
              
              <h2>📋 Detailed Results</h2>
              <pre>{json.dumps(security_summary, indent=2)}</pre>
          </body>
          </html>
          """
          
          with open("security-dashboard.html", "w") as f:
              f.write(html_content)
          
          # Save JSON summary
          with open("security-summary.json", "w") as f:
              json.dump(security_summary, f, indent=2)
          EOF

      - name: 📊 Upload Security Dashboard
        uses: actions/upload-artifact@v3
        with:
          name: security-dashboard
          path: |
            security-dashboard.html
            security-summary.json
          retention-days: 90

      - name: 📈 Update Security Metrics
        run: |
          # Create metrics for Prometheus/Grafana
          echo "# HELP eatech_security_scan_timestamp Last security scan timestamp" > security-metrics.txt
          echo "# TYPE eatech_security_scan_timestamp gauge" >> security-metrics.txt
          echo "eatech_security_scan_timestamp $(date +%s)" >> security-metrics.txt

  # ===== NOTIFICATIONS =====
  notify:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan, dast-scan, swiss-compliance, security-metrics]
    if: always()
    steps:
      - name: 📊 Calculate Security Score
        id: security-score
        run: |
          DEPS_STATUS="${{ needs.dependency-scan.result }}"
          SAST_STATUS="${{ needs.sast-scan.result }}"
          SECRETS_STATUS="${{ needs.secrets-scan.result }}"
          DAST_STATUS="${{ needs.dast-scan.result }}"
          COMPLIANCE_STATUS="${{ needs.swiss-compliance.result }}"
          
          SCORE=0
          [[ $DEPS_STATUS == "success" ]] && SCORE=$((SCORE + 20))
          [[ $SAST_STATUS == "success" ]] && SCORE=$((SCORE + 25))
          [[ $SECRETS_STATUS == "success" ]] && SCORE=$((SCORE + 20))
          [[ $DAST_STATUS == "success" ]] && SCORE=$((SCORE + 20))
          [[ $COMPLIANCE_STATUS == "success" ]] && SCORE=$((SCORE + 15))
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          
          if [ $SCORE -ge 90 ]; then
            echo "grade=A" >> $GITHUB_OUTPUT
            echo "color=00ff00" >> $GITHUB_OUTPUT
          elif [ $SCORE -ge 80 ]; then
            echo "grade=B" >> $GITHUB_OUTPUT
            echo "color=ffff00" >> $GITHUB_OUTPUT
          elif [ $SCORE -ge 70 ]; then
            echo "grade=C" >> $GITHUB_OUTPUT
            echo "color=ff8800" >> $GITHUB_OUTPUT
          else
            echo "grade=F" >> $GITHUB_OUTPUT
            echo "color=ff0000" >> $GITHUB_OUTPUT
          fi

      - name: 📧 Slack Security Report
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.security-score.outputs.grade == 'F' && 'failure' || 'success' }}
          text: |
            🔒 **Security Scan Report**
            
            **Overall Grade:** ${{ steps.security-score.outputs.grade }} (${{ steps.security-score.outputs.score }}/100)
            **Branch:** ${{ github.ref_name }}
            **Triggered:** ${{ github.event_name }}
            
            **Scan Results:**
            • Dependencies: ${{ needs.dependency-scan.result }}
            • SAST: ${{ needs.sast-scan.result }}
            • Secrets: ${{ needs.secrets-scan.result }}
            • DAST: ${{ needs.dast-scan.result }}
            • Swiss Compliance: ${{ needs.swiss-compliance.result }}
            
            ${{ steps.security-score.outputs.grade == 'F' && '🚨 **CRITICAL**: Security issues detected! Please review immediately.' || '✅ Security posture is acceptable.' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🚨 Critical Security Alert
        if: steps.security-score.outputs.grade == 'F'
        uses: PagerDuty/action-pagerduty-alert@v1
        with:
          pagerduty-integration-key: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}
          pagerduty-dedup-key: "security-scan-critical-${{ github.sha }}"
          pagerduty-description: "Critical security vulnerabilities detected in EATECH"
          pagerduty-severity: "critical"

      - name: 📧 Email Security Report
        if: github.event_name == 'schedule' || steps.security-score.outputs.grade == 'F'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🔒 EATECH Security Report - Grade ${{ steps.security-score.outputs.grade }}"
          to: security@eatech.ch,benedikt@thomma.ch
          from: security@eatech.ch
          html_body: |
            <h2>🔒 EATECH Security Scan Report</h2>
            <p><strong>Overall Security Grade:</strong> <span style="color: #${{ steps.security-score.outputs.color }}">
            ${{ steps.security-score.outputs.grade }} (${{ steps.security-score.outputs.score }}/100)</span></p>
            
            <h3>📊 Scan Results</h3>
            <ul>
              <li>Dependencies: ${{ needs.dependency-scan.result }}</li>
              <li>SAST (Static Analysis): ${{ needs.sast-scan.result }}</li>
              <li>Secrets Scanning: ${{ needs.secrets-scan.result }}</li>
              <li>DAST (Dynamic Analysis): ${{ needs.dast-scan.result }}</li>
              <li>Swiss Compliance: ${{ needs.swiss-compliance.result }}</li>
            </ul>
            
            <h3>🔗 Additional Information</h3>
            <ul>
              <li><strong>Repository:</strong> ${{ github.repository }}</li>
              <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
              <li><strong>Commit:</strong> ${{ github.sha }}</li>
              <li><strong>Scan Date:</strong> ${{ github.run_started_at }}</li>
              <li><strong>Dashboard:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Details</a></li>
            </ul>
            
            ${{ steps.security-score.outputs.grade == 'F' && '<p style="color: red;"><strong>⚠️ CRITICAL:</strong> Immediate action required to address security vulnerabilities!</p>' || '<p style="color: green;">✅ Security posture is within acceptable parameters.</p>' }}

      - name: 💬 Discord Notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🔒 Security Scan Complete"
          description: |
            **Grade:** ${{ steps.security-score.outputs.grade }} (${{ steps.security-score.outputs.score }}/100)
            **Branch:** ${{ github.ref_name }}
            **Status:** ${{ steps.security-score.outputs.grade == 'F' && '🚨 Critical Issues' || '✅ Passed' }}
          color: 0x${{ steps.security-score.outputs.color }}