# EATECH V3.0 - Firebase Functions Dockerfile
# Node.js 18 with Firebase Functions Framework
# Optimized for serverless execution and local development

# Base image with Node.js 18 - Google Functions Runtime Compatible
FROM node:18-slim AS base
LABEL maintainer="benedikt@thomma.ch"
LABEL description="EATECH Firebase Functions - Node.js 18"
LABEL version="3.0.0"

# Install system dependencies required for Firebase Functions
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    build-essential \
    curl \
    git \
    ca-certificates \
    dumb-init \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Firebase CLI globally
RUN npm install -g firebase-tools@latest
RUN npm install -g @google-cloud/functions-framework

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN groupadd --gid 1001 functions
RUN useradd --uid 1001 --gid 1001 --shell /bin/bash --create-home functions

# Create necessary directories
RUN mkdir -p /app/functions /app/logs /tmp/functions
RUN chown -R functions:functions /app /tmp/functions

# Dependencies stage
FROM base AS deps
COPY functions/package*.json ./functions/
COPY package*.json ./

# Install dependencies
WORKDIR /app/functions
RUN npm ci --only=production --ignore-scripts
RUN npm cache clean --force

# Development stage
FROM base AS development
COPY --from=deps /app/functions/node_modules ./functions/node_modules

# Copy function source code
COPY functions ./functions
COPY firebase.json ./
COPY firestore.* ./

# Install all dependencies including dev dependencies
WORKDIR /app/functions
RUN npm ci --ignore-scripts

# Set environment variables for development
ENV NODE_ENV=development
ENV FUNCTIONS_EMULATOR=true
ENV FIREBASE_CONFIG='{"projectId":"eatech-dev","storageBucket":"eatech-dev.appspot.com"}'
ENV GCLOUD_PROJECT=eatech-dev
ENV PORT=5001
ENV HOST=0.0.0.0

# Expose ports for Functions Emulator
EXPOSE 5001 8080 9099

# Switch to non-root user
USER functions

# Development command
CMD ["npm", "run", "serve"]

# Builder stage for production
FROM base AS builder
COPY --from=deps /app/functions/node_modules ./functions/node_modules

# Copy all source files
COPY functions ./functions
COPY firebase.json ./
COPY firestore.* ./

# Install all dependencies
WORKDIR /app/functions
RUN npm ci --ignore-scripts

# Build TypeScript (if applicable)
RUN npm run build 2>/dev/null || echo "No build script found, skipping..."

# Remove dev dependencies for production
RUN npm prune --production

# Production stage
FROM base AS production
ENV NODE_ENV=production
ENV FIREBASE_CONFIG='{"projectId":"eatech-prod","storageBucket":"eatech-prod.appspot.com"}'
ENV GCLOUD_PROJECT=eatech-prod
ENV PORT=8080
ENV HOST=0.0.0.0

# Copy built functions
COPY --from=builder --chown=functions:functions /app/functions ./functions
COPY --from=builder --chown=functions:functions /app/firebase.json ./
COPY --from=builder --chown=functions:functions /app/firestore.* ./

WORKDIR /app/functions

# Verify production dependencies
RUN npm ls --depth=0

# Security: Remove unnecessary files
RUN rm -rf src/ *.ts tsconfig.json .eslintrc.* 2>/dev/null || true
RUN rm -rf test/ tests/ __tests__/ *.test.* *.spec.* 2>/dev/null || true
RUN rm -rf .git .github .vscode .idea 2>/dev/null || true

# Create health check endpoint
RUN mkdir -p /app/health
RUN echo 'const functions = require("firebase-functions"); \
module.exports = functions.https.onRequest((req, res) => { \
  res.status(200).json({ \
    status: "healthy", \
    timestamp: new Date().toISOString(), \
    version: process.env.npm_package_version || "unknown", \
    node: process.version, \
    uptime: process.uptime() \
  }); \
});' > /app/health/index.js

# Switch to non-root user
USER functions

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]

# Production command using Functions Framework
CMD ["npx", "functions-framework", "--target=api", "--port=8080", "--source=."]

# Emulator stage for local testing
FROM development AS emulator
ENV FIREBASE_EMULATOR_HUB=0.0.0.0:4400
ENV FIRESTORE_EMULATOR_HOST=0.0.0.0:8080
ENV FIREBASE_AUTH_EMULATOR_HOST=0.0.0.0:9099

# Expose emulator ports
EXPOSE 4400 8080 9099 5001

# Copy emulator configuration
COPY firebase.json ./
COPY firestore.rules ./
COPY storage.rules ./

# Install emulator dependencies
RUN npm install -g @firebase/rules-unit-testing

# Emulator command
CMD ["firebase", "emulators:start", "--only", "functions,firestore,auth", "--host", "0.0.0.0"]

# Testing stage
FROM emulator AS test
USER root
RUN apt-get update && apt-get install -y \
    chromium \
    && rm -rf /var/lib/apt/lists/*

USER functions

# Install test dependencies
RUN npm install --save-dev \
    jest \
    supertest \
    @firebase/rules-unit-testing

# Test command
CMD ["npm", "test"]

# Multi-function stage for specific functions
FROM production AS api-function
WORKDIR /app/functions
ENV FUNCTION_TARGET=api
CMD ["npx", "functions-framework", "--target=api"]

FROM production AS webhook-function
WORKDIR /app/functions
ENV FUNCTION_TARGET=webhooks
CMD ["npx", "functions-framework", "--target=webhooks"]

FROM production AS scheduler-function
WORKDIR /app/functions
ENV FUNCTION_TARGET=scheduledTasks
CMD ["npx", "functions-framework", "--target=scheduledTasks"]

# AI Functions stage with additional dependencies
FROM production AS ai-functions
USER root
RUN apt-get update && apt-get install -y \
    python3-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

USER functions
RUN npm install \
    @google-cloud/aiplatform \
    openai \
    @tensorflow/tfjs-node

ENV FUNCTION_TARGET=aiServices
CMD ["npx", "functions-framework", "--target=aiServices"]

# Default to production
FROM production AS final

# Enhanced metadata
LABEL org.opencontainers.image.title="EATECH Firebase Functions"
LABEL org.opencontainers.image.description="Serverless backend functions for EATECH platform"
LABEL org.opencontainers.image.version="3.0.0"
LABEL org.opencontainers.image.created="2025-01-07"
LABEL org.opencontainers.image.revision="main"
LABEL org.opencontainers.image.licenses="Proprietary"
LABEL org.opencontainers.image.vendor="EATECH"
LABEL org.opencontainers.image.authors="benedikt@thomma.ch"
LABEL org.opencontainers.image.url="https://api.eatech.ch"
LABEL org.opencontainers.image.documentation="https://docs.eatech.ch/api"
LABEL org.opencontainers.image.source="https://github.com/BenediktT03/Eatech"
LABEL functions.runtime="nodejs18"
LABEL functions.trigger="http,firestore,auth,pubsub,scheduler"

# Build arguments for CI/CD
ARG BUILD_DATE
ARG BUILD_VERSION
ARG VCS_REF
ARG FUNCTION_NAME
LABEL build-date=$BUILD_DATE
LABEL build-version=$BUILD_VERSION
LABEL vcs-ref=$VCS_REF
LABEL function-name=$FUNCTION_NAME

# Security configurations
RUN echo "Security: Running as non-root user functions (UID: 1001)"
RUN echo "Environment: Production with Firebase Functions Framework"
RUN echo "Dependencies verified: $(npm ls --depth=0 | wc -l) packages"

# Final verification
RUN node --version
RUN npm --version
RUN firebase --version 2>/dev/null || echo "Firebase CLI available in development stage only"
RUN echo "EATECH Firebase Functions built successfully for production"

# Runtime configuration hints
RUN echo "Runtime Hints:"
RUN echo "- Use --target flag to specify function entry point"
RUN echo "- Set FUNCTION_TARGET environment variable for specific functions"
RUN echo "- Health check available at /health endpoint"
RUN echo "- Logs are written to stdout/stderr for Cloud Functions compatibility"
