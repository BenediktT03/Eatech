{
  "rules": {
    
    "master": {
      ".read": "auth != null && auth.token.isMasterAdmin === true",
      ".write": "auth != null && auth.token.isMasterAdmin === true",
      
      "tenants": {
        "$tenantId": {
          ".validate": "newData.hasChildren(['id', 'name', 'subdomain', 'owner', 'plan', 'instance', 'status'])",
          
          "billing": {
            ".read": "auth != null && (auth.token.isMasterAdmin === true || auth.token.tenantId === $tenantId)",
            ".write": "auth != null && auth.token.isMasterAdmin === true"
          }
        }
      },
      
      "metrics": {
        ".read": "auth != null && auth.token.isMasterAdmin === true",
        ".write": false,
        ".indexOn": ["timestamp"]
      },
      
      "health": {
        ".read": "auth != null && (auth.token.isMasterAdmin === true || auth.token.isMonitoring === true)",
        ".write": false
      },
      
      "backups": {
        ".read": "auth != null && auth.token.isMasterAdmin === true",
        ".write": false,
        ".indexOn": ["timestamp", "status"]
      }
    },
    
    
    "tenants": {
      "$tenantId": {
        
        ".read": "auth != null && auth.token.tenantId === $tenantId",
        ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
        
        
        "settings": {
          ".read": "auth != null && auth.token.tenantId === $tenantId",
          ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          
          ".validate": "newData.hasChildren(['name', 'theme', 'language', 'currency', 'timezone'])",
          
          "payment": {
            
            ".read": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
            ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
            
            "stripeKeys": {
              ".validate": "newData.hasChildren(['publishableKey']) && !newData.hasChild('secretKey')"
            }
          },
          
          "features": {
            
            ".write": "auth != null && auth.token.isMasterAdmin === true"
          }
        },
        
       
        "products": {
          ".read": true, 
          ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          
          ".indexOn": ["category", "active", "price", "name", "position"],
          
          "$productId": {
            ".validate": "newData.hasChildren(['name', 'price', 'category']) && newData.child('price').isNumber() && newData.child('price').val() > 0",
            
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 100"
            },
            
            "price": {
              ".validate": "newData.isNumber() && newData.val() > 0 && newData.val() < 1000"
            },
            
            "category": {
              ".validate": "newData.isString() && root.child('tenants').child($tenantId).child('categories').hasChild(newData.val())"
            },
            
            "active": {
              ".validate": "newData.isBoolean()"
            },
            
            "allergens": {
              "$allergen": {
                ".validate": "newData.isBoolean()"
              }
            },
            
            "nutritionalInfo": {
              "calories": { ".validate": "newData.isNumber() && newData.val() >= 0" },
              "protein": { ".validate": "newData.isNumber() && newData.val() >= 0" },
              "carbs": { ".validate": "newData.isNumber() && newData.val() >= 0" },
              "fat": { ".validate": "newData.isNumber() && newData.val() >= 0" }
            }
          }
        },
        
        
        "categories": {
          ".read": true, 
          ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          
          ".indexOn": ["position", "active"],
          
          "$categoryId": {
            ".validate": "newData.hasChildren(['name', 'position'])",
            
            "name": {
              ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 50"
            },
            
            "position": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            }
          }
        },
        
        
        "orders": {
         
          ".read": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          
          
          ".write": "auth != null && auth.token.tenantId === $tenantId && (auth.token.role === 'admin' || !data.exists())",
          
          ".indexOn": ["timestamp", "status", "customerPhone", "orderNumber", "paymentStatus"],
          
          "$orderId": {
            
            ".read": "auth != null && (auth.token.role === 'admin' || (data.exists() && data.child('customerId').val() === auth.uid) || (data.exists() && data.child('customerPhone').val() === auth.token.phone_number))",
            
            
            ".write": "auth != null && auth.token.tenantId === $tenantId && (auth.token.role === 'admin' || (!data.exists() && newData.child('customerId').val() === auth.uid))",
            
            ".validate": "newData.hasChildren(['items', 'total', 'timestamp', 'status', 'orderNumber'])",
            
            "items": {
              "$itemId": {
                ".validate": "newData.hasChildren(['productId', 'name', 'price', 'quantity']) && newData.child('quantity').isNumber() && newData.child('quantity').val() > 0"
              }
            },
            
            "total": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            
            "status": {
              ".validate": "newData.val() === 'new' || newData.val() === 'confirmed' || newData.val() === 'preparing' || newData.val() === 'ready' || newData.val() === 'completed' || newData.val() === 'cancelled'"
            },
            
            "paymentStatus": {
              ".validate": "newData.val() === 'pending' || newData.val() === 'processing' || newData.val() === 'succeeded' || newData.val() === 'failed' || newData.val() === 'refunded'"
            },
            
            "orderNumber": {
              ".validate": "newData.isString() && newData.val().length === 6"
            }
          }
        },
        
        
        "customers": {
          ".read": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          ".write": "auth != null && auth.token.tenantId === $tenantId",
          
          ".indexOn": ["email", "phone", "created", "lastOrder"],
          
          "$customerId": {
            
            ".read": "auth != null && (auth.token.role === 'admin' || $customerId === auth.uid)",
            ".write": "auth != null && (auth.token.role === 'admin' || $customerId === auth.uid)",
            
            ".validate": "newData.hasChildren(['created']) && (!newData.hasChild('email') || newData.child('email').val().matches(/^[^@]+@[^@]+\\.[^@]+$/))",
            
            "loyalty": {
              "points": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              
              "tier": {
                ".validate": "newData.val() === 'bronze' || newData.val() === 'silver' || newData.val() === 'gold' || newData.val() === 'platinum'"
              }
            },
            
            "preferences": {
              "notifications": {
                ".validate": "newData.hasChildren(['email', 'push', 'sms'])"
              },
              
              "dietary": {
                "$restriction": {
                  ".validate": "newData.isBoolean()"
                }
              }
            },
            
            
            "deletionRequested": {
              ".validate": "newData.isBoolean()"
            }
          }
        },
        
        
        "analytics": {
          
          ".read": "auth != null && auth.token.tenantId === $tenantId && (auth.token.role === 'admin' || auth.token.role === 'analyst')",
          
         
          ".write": false,
          
          "daily": {
            ".indexOn": ["date", "revenue", "orders"],
            
            "$date": {
              ".validate": "newData.hasChildren(['revenue', 'orders', 'customers', 'products'])"
            }
          },
          
          "products": {
            ".indexOn": ["sales", "revenue"],
            
            "$productId": {
              ".validate": "root.child('tenants').child($tenantId).child('products').hasChild($productId)"
            }
          },
          
          "realtime": {
            ".read": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
            
            "activeUsers": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            
            "openCarts": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            }
          }
        },
        
       
        "staff": {
          ".read": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          
          "$staffId": {
            ".validate": "newData.hasChildren(['email', 'name', 'role', 'active'])",
            
            "role": {
              ".validate": "newData.val() === 'admin' || newData.val() === 'manager' || newData.val() === 'staff' || newData.val() === 'analyst'"
            },
            
            "permissions": {
              "$permission": {
                ".validate": "newData.isBoolean()"
              }
            }
          }
        },
        
        
        "inventory": {
          ".read": "auth != null && auth.token.tenantId === $tenantId && (auth.token.role === 'admin' || auth.token.role === 'manager')",
          ".write": "auth != null && auth.token.tenantId === $tenantId && (auth.token.role === 'admin' || auth.token.role === 'manager')",
          
          "$itemId": {
            ".validate": "newData.hasChildren(['name', 'quantity', 'unit', 'reorderLevel'])",
            
            "quantity": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            
            "movements": {
              "$movementId": {
                ".validate": "newData.hasChildren(['type', 'quantity', 'timestamp', 'reason', 'performedBy'])"
              }
            }
          }
        },
        
        
        "discounts": {
          ".read": true, 
          ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          
          ".indexOn": ["active", "validFrom", "validUntil", "type"],
          
          "$discountId": {
            ".validate": "newData.hasChildren(['type', 'value', 'active'])",
            
            "code": {
              ".validate": "!data.exists() || data.val() === newData.val()", 
              "$other": { ".validate": false }
            },
            
            "usageLimit": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            
            "usageCount": {
              ".validate": "newData.isNumber() && newData.val() >= 0 && (!data.exists() || newData.val() >= data.val())"
            }
          }
        },
        
        
        "reviews": {
          ".read": true, 
          ".write": "auth != null", 
          
          ".indexOn": ["productId", "rating", "timestamp"],
          
          "$reviewId": {
            ".validate": "newData.hasChildren(['productId', 'rating', 'customerId', 'timestamp'])",
            
            
            ".write": "auth != null && (!data.exists() || data.child('customerId').val() === auth.uid || auth.token.role === 'admin')",
            
            "rating": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 5"
            },
            
            "verified": {
              
              ".write": false
            }
          }
        },
        
        
        "compliance": {
          ".read": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'",
          ".write": false, 
          
          "gdpr": {
            "deletionRequests": {
              ".indexOn": ["timestamp", "status"],
              
              "$requestId": {
                ".write": "auth != null && auth.token.tenantId === $tenantId && auth.token.role === 'admin'"
              }
            },
            
            "dataExports": {
              ".indexOn": ["timestamp", "customerId"]
            }
          },
          
          "audit": {
            ".indexOn": ["timestamp", "action", "performedBy"],
            
            "$auditId": {
              ".validate": "newData.hasChildren(['timestamp', 'action', 'performedBy', 'details'])"
            }
          }
        }
      }
    },
    
   
    "public": {
      ".read": true,
      ".write": false, 
      
      "tenantDirectory": {
        "$tenantId": {
          ".validate": "newData.hasChildren(['name', 'subdomain', 'active'])"
        }
      },
      
      "systemStatus": {
        ".read": true
      }
    },
    
   
    "queues": {
      "emails": {
        ".read": false,
        ".write": "auth != null", 
        "$jobId": {
          ".validate": "newData.hasChildren(['to', 'template', 'data', 'tenantId']) && newData.child('tenantId').val() === auth.token.tenantId"
        }
      },
      
      "notifications": {
        ".read": false,
        ".write": "auth != null",
        
        "$jobId": {
          ".validate": "newData.hasChildren(['type', 'recipient', 'message', 'tenantId'])"
        }
      }
    }
  }
}