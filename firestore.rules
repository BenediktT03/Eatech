rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isTenantMember(tenantId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/tenants/$(tenantId)/members/$(request.auth.uid));
    }

    function isTenantAdmin(tenantId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/tenants/$(tenantId)/members/$(request.auth.uid)).data.role in ['admin', 'owner'];
    }

    function isTenantStaff(tenantId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/tenants/$(tenantId)/members/$(request.auth.uid)).data.role in ['admin', 'owner', 'manager', 'staff'];
    }

    function isMasterAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/masterUsers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/masterUsers/$(request.auth.uid)).data.role in ['superadmin', 'admin'];
    }

    function isMasterUser() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/masterUsers/$(request.auth.uid));
    }

    function isValidTenant(tenantId) {
      return exists(/databases/$(database)/documents/tenants/$(tenantId)) &&
        get(/databases/$(database)/documents/tenants/$(tenantId)).data.status == 'active';
    }

    function canReadTenantData(tenantId) {
      return isMasterUser() || isTenantMember(tenantId);
    }

    function canWriteTenantData(tenantId) {
      return isMasterAdmin() || isTenantAdmin(tenantId);
    }

    // Validation Functions
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidPhone(phone) {
      return phone.matches('^\\+[1-9]\\d{1,14}$');
    }

    function isValidPrice(price) {
      return price is number && price >= 0 && price <= 99999.99;
    }

    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }

    // ========== TENANT RULES ==========

    // Tenants Collection
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() && (isMasterUser() || isTenantMember(tenantId));
      allow create: if isMasterAdmin();
      allow update: if canWriteTenantData(tenantId) &&
        request.resource.data.status in ['active', 'suspended', 'trial'];
      allow delete: if isMasterAdmin();

      // Tenant Members SubCollection
      match /members/{userId} {
        allow read: if canReadTenantData(tenantId);
        allow write: if canWriteTenantData(tenantId) || isOwner(userId);
      }

      // Products SubCollection
      match /products/{productId} {
        allow read: if true; // Public products
        allow create: if isTenantStaff(tenantId) &&
          hasRequiredFields(['name', 'pricing', 'category']) &&
          isValidPrice(request.resource.data.pricing.basePrice);
        allow update: if isTenantStaff(tenantId) &&
          (!('pricing' in request.resource.data) || isValidPrice(request.resource.data.pricing.basePrice));
        allow delete: if isTenantAdmin(tenantId);
      }

      // Orders SubCollection
      match /orders/{orderId} {
        allow read: if isTenantStaff(tenantId) ||
          (isAuthenticated() && resource.data.customer.firebaseUid == request.auth.uid) ||
          (resource.data.customer.phone == request.auth.token.phone_number);
        allow create: if isValidTenant(tenantId) &&
          hasRequiredFields(['items', 'customer', 'pricing']) &&
          request.resource.data.items.size() > 0;
        allow update: if isTenantStaff(tenantId) ||
          (isAuthenticated() && resource.data.customer.firebaseUid == request.auth.uid &&
           request.resource.data.status == 'cancelled');
        allow delete: if false; // Orders should never be deleted
      }

      // Analytics SubCollection (Read-only for tenants)
      match /analytics/{doc} {
        allow read: if canReadTenantData(tenantId);
        allow write: if false; // Only system can write analytics
      }

      // Reviews SubCollection
      match /reviews/{reviewId} {
        allow read: if true; // Public reviews
        allow create: if isAuthenticated() &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.rating >= 1 &&
          request.resource.data.rating <= 5;
        allow update: if isOwner(resource.data.userId) &&
          resource.data.createdAt == request.resource.data.createdAt;
        allow delete: if isTenantAdmin(tenantId) || isOwner(resource.data.userId);
      }

      // Events SubCollection
      match /events/{eventId} {
        allow read: if true; // Public events
        allow write: if isTenantAdmin(tenantId);
      }

      // Promotions SubCollection
      match /promotions/{promotionId} {
        allow read: if true; // Public promotions
        allow write: if isTenantAdmin(tenantId);
      }

      // Inventory SubCollection
      match /inventory/{inventoryId} {
        allow read: if isTenantStaff(tenantId);
        allow write: if isTenantStaff(tenantId);
      }

      // Private settings
      match /settings/{settingDoc} {
        allow read: if canReadTenantData(tenantId);
        allow write: if canWriteTenantData(tenantId);
      }
    }

    // ========== CUSTOMER RULES ==========

    // Customers Collection (Global)
    match /customers/{customerId} {
      allow read: if isOwner(customerId) || isMasterUser();
      allow create: if isAuthenticated() && isOwner(customerId) &&
        hasRequiredFields(['email', 'phone']) &&
        isValidEmail(request.resource.data.email) &&
        isValidPhone(request.resource.data.phone);
      allow update: if isOwner(customerId) &&
        (!('email' in request.resource.data) || isValidEmail(request.resource.data.email)) &&
        (!('phone' in request.resource.data) || isValidPhone(request.resource.data.phone));
      allow delete: if isOwner(customerId); // GDPR compliance

      // Customer SubCollections
      match /addresses/{addressId} {
        allow read, write: if isOwner(customerId);
      }

      match /paymentMethods/{paymentId} {
        allow read, write: if isOwner(customerId);
      }

      match /loyaltyPoints/{tenantId} {
        allow read: if isOwner(customerId) || isTenantStaff(tenantId);
        allow write: if false; // Only system can modify points
      }
    }

    // ========== MASTER CONTROL RULES ==========

    // Master Users
    match /masterUsers/{userId} {
      allow read: if isMasterUser();
      allow write: if isMasterAdmin() &&
        request.resource.data.role in ['superadmin', 'admin', 'support', 'analyst'];
    }

    // System Configuration
    match /systemConfig/{configId} {
      allow read: if isMasterUser();
      allow write: if isMasterAdmin();
    }

    // Feature Flags
    match /featureFlags/{flagDoc} {
      allow read: if isAuthenticated();
      allow write: if isMasterAdmin();
    }

    // Platform Analytics
    match /platformAnalytics/{analyticsDoc} {
      allow read: if isMasterUser();
      allow write: if false; // Only Cloud Functions
    }

    // System Errors
    match /systemErrors/{errorId} {
      allow read: if isMasterUser();
      allow create: if isAuthenticated(); // Any authenticated user can report errors
      allow update: if isMasterUser() &&
        request.resource.data.keys().hasAll(['resolved', 'resolution']);
      allow delete: if false;
    }

    // AI Models
    match /aiModels/{modelId} {
      allow read: if isMasterUser();
      allow write: if isMasterAdmin();

      match /metrics/{metricId} {
        allow read: if isMasterUser();
        allow write: if false; // Only system
      }
    }

    // Training Jobs
    match /trainingJobs/{jobId} {
      allow read: if isMasterUser();
      allow create: if isMasterAdmin();
      allow update: if false; // Only system can update job status
      allow delete: if false;
    }

    // Support Tickets
    match /supportTickets/{ticketId} {
      allow read: if isMasterUser() ||
        (isAuthenticated() && resource.data.createdBy == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isMasterUser() ||
        (isAuthenticated() && resource.data.createdBy == request.auth.uid &&
         resource.data.status == 'open');
      allow delete: if false;

      match /messages/{messageId} {
        allow read: if isMasterUser() ||
          (isAuthenticated() && get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.createdBy == request.auth.uid);
        allow create: if isMasterUser() ||
          (isAuthenticated() && get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.createdBy == request.auth.uid);
        allow update, delete: if false;
      }
    }

    // ========== PUBLIC COLLECTIONS ==========

    // Public tenant information (for discovery)
    match /publicTenants/{tenantId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions sync this
    }

    // App configuration
    match /appConfig/{configDoc} {
      allow read: if true;
      allow write: if isMasterAdmin();
    }

    // ========== AUDIT & COMPLIANCE ==========

    // Audit logs (write-only for compliance)
    match /auditLogs/{logId} {
      allow read: if isMasterAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Immutable logs
    }

    // GDPR/DSG Compliance
    match /dataRequests/{requestId} {
      allow read: if isMasterAdmin() ||
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.type in ['export', 'delete', 'rectification'];
      allow update: if isMasterAdmin();
      allow delete: if false;
    }

    // ========== CATCH-ALL RULE ==========

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
